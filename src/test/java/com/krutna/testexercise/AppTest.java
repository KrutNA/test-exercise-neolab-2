/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.krutna.testexercise;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class AppTest {

  App app;

  @Before
  public void setupApp() {
    app = new App();
  }

  @Test
  public void testTimeConvertion() {
    assertEquals("09:10:01", app.correctTime("09:10:01"));
    assertEquals("12:10:10", app.correctTime("11:70:10"));
    assertEquals("20:40:39", app.correctTime("19:99:99"));
    assertEquals("00:01:01", app.correctTime("24:01:01"));
    assertEquals("", app.correctTime(""));

    try {
      app.correctTime("Some text not in the pattern");
      fail("Expected IllegalArgumentException of wrong format.");
    } catch (final IllegalArgumentException e) {
      assertEquals(
          "Expected time in format '?:?:?' where '?' is an integer from 0 to 9999.",
          e.getMessage());
    }
  }

  @Test
  public void testOddsSorting() {
    assertArrayEquals(new int[] {1, 3, 2, 8, 5, 4}, app.sortOdds(new int[] {5, 3, 2, 8, 1, 4}));
  }

  @Test
  public void testChessboard() {
    assertEquals(false, app.checkChess("  K R       QR Q"));
    assertEquals(true, app.checkChess("  K  P          "));
    assertEquals(true, app.checkChess("  K    P        "));
    assertEquals(false, app.checkChess("       P  K     "));
    assertEquals(false, app.checkChess("     P    K     "));
    assertEquals(true, app.checkChess("Q         K     "));
    assertEquals(true, app.checkChess("B         K     "));
    assertEquals(true, app.checkChess(" N        K     "));
    assertEquals(true, app.checkChess("    N     K     "));
    assertEquals(true, app.checkChess("  R       K     "));
    assertEquals(true, app.checkChess("        R K     "));

    try {
      app.checkChess("Input with lngth which missmatches size of checkboard");
      fail("Expected IllegalArgumentException of size missmatching.");
    } catch (final IllegalArgumentException e) {
      assertEquals("Size of chessboard and size of data missmatches.", e.getMessage());
    }

    try {
      app.checkChess("        R K  K  ");
      fail("Expected IllegalArgumentException of multiple kings.");
    } catch (final IllegalArgumentException e) {
      assertEquals("Multiple kings detected.", e.getMessage());
    }

    try {
      app.checkChess("                ");
      fail("Expected IllegalArgumentException of king not found.");
    } catch (final IllegalArgumentException e) {
      assertEquals("King not found.", e.getMessage());
    }
  }
}
